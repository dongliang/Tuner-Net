// This is the backend code for reading and writing

// Generated by ProtocolBuffer

// - a pure c# code generation implementation of protocol buffers

// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT

// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using UnityEngine;

namespace TunerMessage
{
    public partial class PBString
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBString Deserialize(Stream stream)
        {
            PBString instance = new PBString();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBString DeserializeLengthDelimited(Stream stream)
        {
            PBString instance = new PBString();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBString DeserializeLength(Stream stream, int length)
        {
            PBString instance = new PBString();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBString Deserialize(byte[] buffer)
        {
            PBString instance = new PBString();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBString Deserialize(byte[] buffer, TunerMessage.PBString instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBString Deserialize(Stream stream, TunerMessage.PBString instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.StrValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBString DeserializeLengthDelimited(Stream stream, TunerMessage.PBString instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.StrValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBString DeserializeLength(Stream stream, int length, TunerMessage.PBString instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.StrValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBString instance)
        {
            if (instance.StrValue == null)
                throw new ArgumentNullException("StrValue", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.StrValue));
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBString instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PBBytes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBBytes Deserialize(Stream stream)
        {
            PBBytes instance = new PBBytes();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBBytes DeserializeLengthDelimited(Stream stream)
        {
            PBBytes instance = new PBBytes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBBytes DeserializeLength(Stream stream, int length)
        {
            PBBytes instance = new PBBytes();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBBytes Deserialize(byte[] buffer)
        {
            PBBytes instance = new PBBytes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBBytes Deserialize(byte[] buffer, TunerMessage.PBBytes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBBytes Deserialize(Stream stream, TunerMessage.PBBytes instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.ByteValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBBytes DeserializeLengthDelimited(Stream stream, TunerMessage.PBBytes instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.ByteValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBBytes DeserializeLength(Stream stream, int length, TunerMessage.PBBytes instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.ByteValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBBytes instance)
        {
            if (instance.ByteValue == null)
                throw new ArgumentNullException("ByteValue", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.ByteValue);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBBytes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PBInt
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBInt Deserialize(Stream stream)
        {
            PBInt instance = new PBInt();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBInt DeserializeLengthDelimited(Stream stream)
        {
            PBInt instance = new PBInt();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBInt DeserializeLength(Stream stream, int length)
        {
            PBInt instance = new PBInt();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBInt Deserialize(byte[] buffer)
        {
            PBInt instance = new PBInt();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBInt Deserialize(byte[] buffer, TunerMessage.PBInt instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBInt Deserialize(Stream stream, TunerMessage.PBInt instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.IntValue = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBInt DeserializeLengthDelimited(Stream stream, TunerMessage.PBInt instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.IntValue = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBInt DeserializeLength(Stream stream, int length, TunerMessage.PBInt instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.IntValue = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBInt instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.IntValue);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBInt instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PBUInt
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBUInt Deserialize(Stream stream)
        {
            PBUInt instance = new PBUInt();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBUInt DeserializeLengthDelimited(Stream stream)
        {
            PBUInt instance = new PBUInt();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBUInt DeserializeLength(Stream stream, int length)
        {
            PBUInt instance = new PBUInt();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBUInt Deserialize(byte[] buffer)
        {
            PBUInt instance = new PBUInt();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBUInt Deserialize(byte[] buffer, TunerMessage.PBUInt instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBUInt Deserialize(Stream stream, TunerMessage.PBUInt instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.UintValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBUInt DeserializeLengthDelimited(Stream stream, TunerMessage.PBUInt instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.UintValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBUInt DeserializeLength(Stream stream, int length, TunerMessage.PBUInt instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.UintValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBUInt instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.UintValue);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBUInt instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PBLong
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBLong Deserialize(Stream stream)
        {
            PBLong instance = new PBLong();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBLong DeserializeLengthDelimited(Stream stream)
        {
            PBLong instance = new PBLong();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBLong DeserializeLength(Stream stream, int length)
        {
            PBLong instance = new PBLong();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBLong Deserialize(byte[] buffer)
        {
            PBLong instance = new PBLong();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBLong Deserialize(byte[] buffer, TunerMessage.PBLong instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBLong Deserialize(Stream stream, TunerMessage.PBLong instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.LongValue = (long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBLong DeserializeLengthDelimited(Stream stream, TunerMessage.PBLong instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.LongValue = (long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBLong DeserializeLength(Stream stream, int length, TunerMessage.PBLong instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.LongValue = (long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBLong instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.LongValue);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBLong instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PBULong
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBULong Deserialize(Stream stream)
        {
            PBULong instance = new PBULong();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBULong DeserializeLengthDelimited(Stream stream)
        {
            PBULong instance = new PBULong();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBULong DeserializeLength(Stream stream, int length)
        {
            PBULong instance = new PBULong();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBULong Deserialize(byte[] buffer)
        {
            PBULong instance = new PBULong();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBULong Deserialize(byte[] buffer, TunerMessage.PBULong instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBULong Deserialize(Stream stream, TunerMessage.PBULong instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.UlongValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBULong DeserializeLengthDelimited(Stream stream, TunerMessage.PBULong instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.UlongValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBULong DeserializeLength(Stream stream, int length, TunerMessage.PBULong instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.UlongValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBULong instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.UlongValue);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBULong instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PBFixed32
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBFixed32 Deserialize(Stream stream)
        {
            PBFixed32 instance = new PBFixed32();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBFixed32 DeserializeLengthDelimited(Stream stream)
        {
            PBFixed32 instance = new PBFixed32();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBFixed32 DeserializeLength(Stream stream, int length)
        {
            PBFixed32 instance = new PBFixed32();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBFixed32 Deserialize(byte[] buffer)
        {
            PBFixed32 instance = new PBFixed32();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBFixed32 Deserialize(byte[] buffer, TunerMessage.PBFixed32 instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBFixed32 Deserialize(Stream stream, TunerMessage.PBFixed32 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                case 13:
                    instance.IntValue = br.ReadUInt32();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBFixed32 DeserializeLengthDelimited(Stream stream, TunerMessage.PBFixed32 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                case 13:
                    instance.IntValue = br.ReadUInt32();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBFixed32 DeserializeLength(Stream stream, int length, TunerMessage.PBFixed32 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                case 13:
                    instance.IntValue = br.ReadUInt32();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBFixed32 instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.IntValue);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBFixed32 instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PBFixed64
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBFixed64 Deserialize(Stream stream)
        {
            PBFixed64 instance = new PBFixed64();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBFixed64 DeserializeLengthDelimited(Stream stream)
        {
            PBFixed64 instance = new PBFixed64();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBFixed64 DeserializeLength(Stream stream, int length)
        {
            PBFixed64 instance = new PBFixed64();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBFixed64 Deserialize(byte[] buffer)
        {
            PBFixed64 instance = new PBFixed64();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBFixed64 Deserialize(byte[] buffer, TunerMessage.PBFixed64 instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBFixed64 Deserialize(Stream stream, TunerMessage.PBFixed64 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed64
                case 9:
                    instance.LongValue = br.ReadUInt64();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBFixed64 DeserializeLengthDelimited(Stream stream, TunerMessage.PBFixed64 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed64
                case 9:
                    instance.LongValue = br.ReadUInt64();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBFixed64 DeserializeLength(Stream stream, int length, TunerMessage.PBFixed64 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed64
                case 9:
                    instance.LongValue = br.ReadUInt64();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBFixed64 instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            // Key for field: 1, Fixed64
            stream.WriteByte(9);
            bw.Write(instance.LongValue);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBFixed64 instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PBFloat
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBFloat Deserialize(Stream stream)
        {
            PBFloat instance = new PBFloat();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBFloat DeserializeLengthDelimited(Stream stream)
        {
            PBFloat instance = new PBFloat();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBFloat DeserializeLength(Stream stream, int length)
        {
            PBFloat instance = new PBFloat();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBFloat Deserialize(byte[] buffer)
        {
            PBFloat instance = new PBFloat();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBFloat Deserialize(byte[] buffer, TunerMessage.PBFloat instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBFloat Deserialize(Stream stream, TunerMessage.PBFloat instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                case 13:
                    instance.FloatValue = br.ReadSingle();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBFloat DeserializeLengthDelimited(Stream stream, TunerMessage.PBFloat instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                case 13:
                    instance.FloatValue = br.ReadSingle();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBFloat DeserializeLength(Stream stream, int length, TunerMessage.PBFloat instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                case 13:
                    instance.FloatValue = br.ReadSingle();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBFloat instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.FloatValue);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBFloat instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PBVector3
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBVector3 Deserialize(Stream stream)
        {
            PBVector3 instance = new PBVector3();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBVector3 DeserializeLengthDelimited(Stream stream)
        {
            PBVector3 instance = new PBVector3();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PBVector3 DeserializeLength(Stream stream, int length)
        {
            PBVector3 instance = new PBVector3();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PBVector3 Deserialize(byte[] buffer)
        {
            PBVector3 instance = new PBVector3();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.PBVector3 Deserialize(byte[] buffer, TunerMessage.PBVector3 instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBVector3 Deserialize(Stream stream, TunerMessage.PBVector3 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                case 13:
                    instance.X = br.ReadSingle();
                    continue;
                    // Field 2 Fixed32
                case 21:
                    instance.Y = br.ReadSingle();
                    continue;
                    // Field 3 Fixed32
                case 29:
                    instance.Z = br.ReadSingle();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBVector3 DeserializeLengthDelimited(Stream stream, TunerMessage.PBVector3 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                case 13:
                    instance.X = br.ReadSingle();
                    continue;
                    // Field 2 Fixed32
                case 21:
                    instance.Y = br.ReadSingle();
                    continue;
                    // Field 3 Fixed32
                case 29:
                    instance.Z = br.ReadSingle();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.PBVector3 DeserializeLength(Stream stream, int length, TunerMessage.PBVector3 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                case 13:
                    instance.X = br.ReadSingle();
                    continue;
                    // Field 2 Fixed32
                case 21:
                    instance.Y = br.ReadSingle();
                    continue;
                    // Field 3 Fixed32
                case 29:
                    instance.Z = br.ReadSingle();
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PBVector3 instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.X);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.Y);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.Z);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PBVector3 instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class TMLogin
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TMLogin Deserialize(Stream stream)
        {
            TMLogin instance = new TMLogin();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TMLogin DeserializeLengthDelimited(Stream stream)
        {
            TMLogin instance = new TMLogin();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TMLogin DeserializeLength(Stream stream, int length)
        {
            TMLogin instance = new TMLogin();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static TMLogin Deserialize(byte[] buffer)
        {
            TMLogin instance = new TMLogin();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.TMLogin Deserialize(byte[] buffer, TunerMessage.TMLogin instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.TMLogin Deserialize(Stream stream, TunerMessage.TMLogin instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    Debug.Log(instance.Username);

                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Password = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.TMLogin DeserializeLengthDelimited(Stream stream, TunerMessage.TMLogin instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Password = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.TMLogin DeserializeLength(Stream stream, int length, TunerMessage.TMLogin instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Password = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, TMLogin instance)
        {
            if (instance.Username == null)
                throw new ArgumentNullException("Username", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Username));
            if (instance.Password == null)
                throw new ArgumentNullException("Password", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Password));
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(TMLogin instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class TMLoginOut
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TMLoginOut Deserialize(Stream stream)
        {
            TMLoginOut instance = new TMLoginOut();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TMLoginOut DeserializeLengthDelimited(Stream stream)
        {
            TMLoginOut instance = new TMLoginOut();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TMLoginOut DeserializeLength(Stream stream, int length)
        {
            TMLoginOut instance = new TMLoginOut();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static TMLoginOut Deserialize(byte[] buffer)
        {
            TMLoginOut instance = new TMLoginOut();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TunerMessage.TMLoginOut Deserialize(byte[] buffer, TunerMessage.TMLoginOut instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TunerMessage.TMLoginOut Deserialize(Stream stream, TunerMessage.TMLoginOut instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                {
                    Debug.Log(1);
                    break; }
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Result = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Nickname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.TMLoginOut DeserializeLengthDelimited(Stream stream, TunerMessage.TMLoginOut instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Result = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Nickname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TunerMessage.TMLoginOut DeserializeLength(Stream stream, int length, TunerMessage.TMLoginOut instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Result = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Nickname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, TMLoginOut instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Result);
            if (instance.Nickname != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Nickname));
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(TMLoginOut instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
}
